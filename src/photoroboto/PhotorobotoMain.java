/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Administration.java
 *
 * Created on Oct 20, 2011, 9:37:33 PM
 */
package photoroboto;

import photoroboto.utility.ImageUtilities;
import com.thebuzzmedia.imgscalr.Scalr;
import edsdk.utils.CanonCamera;
import java.awt.BorderLayout;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import photoroboto.enums.OverlayPosition;
import photoroboto.enums.OverlayProperties;
import photoroboto.enums.PostProcessProperties;
import photoroboto.enums.SessionProperties;
import photoroboto.panels.CameraSettingsPanel;
import photoroboto.panels.OverlayPanel;
import photoroboto.panels.PostProcessPanel;
import photoroboto.panels.SessionPanel;
import photoroboto.slideshow.SlideShow;

/**
 *
 * @author Brian
 */
public class PhotorobotoMain extends javax.swing.JFrame
{

    private Properties properties = null;
    private JTabbedPane tabbedPane;
    private CameraSettingsPanel cameraSettingsPanel;
    private OverlayPanel overlayPanel;
    private PostProcessPanel postProcessPanel;
    private SessionPanel sessionPanel;
    private SlideShow slideShow;
    private PhotoboothSession session;
    private File propertiesFile;

    /** Creates new form Administration */
    public PhotorobotoMain()
    {
        //default properties file
        propertiesFile = new File("resources/photoroboto.properties");
        loadProperties(propertiesFile);
        initComponents();
        loadPanels();
    }

    private void loadProperties(File file)
    {
        properties = new Properties();
        try
        {
            properties.load(new FileInputStream(file));
        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(
                    this,
                    "Cannot load properties file: " + file.getPath(),
                    "Properties Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveProperties(File file)
    {
        //set properties for tabs
        properties = cameraSettingsPanel.setProperties(properties);
        properties = sessionPanel.setProperties(properties);
        properties = postProcessPanel.setProperties(properties);
        properties = overlayPanel.setProperties(properties);

        try
        {
            properties.store(new FileOutputStream(file), "Photoroboto Properties");
        }
        catch (IOException e)
        {
            JOptionPane.showMessageDialog(
                    this,
                    "Cannot save properties file: " + file.getPath(),
                    "Properties Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPanels()
    {
        tabbedPane = new JTabbedPane();
        cameraSettingsPanel = new CameraSettingsPanel(properties);
        tabbedPane.addTab("Camera Settings", cameraSettingsPanel);

        overlayPanel = new OverlayPanel();
        overlayPanel.getProperties(properties);
        tabbedPane.addTab("Overlay", overlayPanel);

        postProcessPanel = new PostProcessPanel();
        postProcessPanel.getProperties(properties);
        tabbedPane.addTab("Post Processing", postProcessPanel);

        sessionPanel = new SessionPanel();
        sessionPanel.getProperties(properties);
        tabbedPane.addTab("Session", sessionPanel);

        this.add(tabbedPane, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        takeTestShotButton = new javax.swing.JButton();
        startSessionButton = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadPropertiesMenuItem = new javax.swing.JMenuItem();
        savePropertiesMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Photoroboto");
        setMinimumSize(new java.awt.Dimension(600, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        takeTestShotButton.setText("Take Test Shot");
        takeTestShotButton.setMaximumSize(new java.awt.Dimension(159, 35));
        takeTestShotButton.setMinimumSize(new java.awt.Dimension(159, 35));
        takeTestShotButton.setPreferredSize(new java.awt.Dimension(159, 35));
        takeTestShotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeTestShotButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        buttonPanel.add(takeTestShotButton, gridBagConstraints);

        startSessionButton.setText("Start Photoroboto Session");
        startSessionButton.setMaximumSize(new java.awt.Dimension(159, 35));
        startSessionButton.setMinimumSize(new java.awt.Dimension(159, 35));
        startSessionButton.setPreferredSize(new java.awt.Dimension(159, 35));
        startSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSessionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        buttonPanel.add(startSessionButton, gridBagConstraints);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");

        loadPropertiesMenuItem.setText("Load Properties");
        loadPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPropertiesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadPropertiesMenuItem);

        savePropertiesMenuItem.setText("Save Properties");
        savePropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropertiesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(savePropertiesMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    cameraSettingsPanel.disconnectCamera();
    System.exit(0);
}//GEN-LAST:event_formWindowClosing

private void startSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSessionButtonActionPerformed
    session = new PhotoboothSession(properties, cameraSettingsPanel.getCamera());
    session.setVisible(true);
}//GEN-LAST:event_startSessionButtonActionPerformed

private void loadPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPropertiesMenuItemActionPerformed
    JFileChooser chooser = new JFileChooser("./resources");
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Properties files", "properties");
    chooser.setFileFilter(filter);
    chooser.setSelectedFile(propertiesFile);
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
        loadProperties(propertiesFile = chooser.getSelectedFile());
    }

    //set properties for tabs
    cameraSettingsPanel.getProperties(properties);
    cameraSettingsPanel.setCameraFields();
}//GEN-LAST:event_loadPropertiesMenuItemActionPerformed

private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
    cameraSettingsPanel.disconnectCamera();
    System.exit(0);
}//GEN-LAST:event_exitMenuItemActionPerformed

private void savePropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropertiesMenuItemActionPerformed
    JFileChooser chooser = new JFileChooser("./resources");
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Properties files", "properties");
    chooser.setFileFilter(filter);
    chooser.setSelectedFile(propertiesFile);
    chooser.setApproveButtonText("Save");
    int returnVal = chooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
        saveProperties(propertiesFile = chooser.getSelectedFile());
    }
}//GEN-LAST:event_savePropertiesMenuItemActionPerformed

private void takeTestShotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeTestShotButtonActionPerformed

    CanonCamera camera = cameraSettingsPanel.getCamera();

    if (cameraSettingsPanel.getCamera().getEdsCamera() != null)
    {
        JFrame frame = new JFrame("Test Shot");
        JLabel imageLabel = new JLabel();
        frame.getContentPane().add(imageLabel, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        BufferedImage image = camera.shootBufferedImage();

        if (image != null)
        {
            if (Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS.name())))
            {
                image = ImageUtilities.postProcess(
                        image,
                        Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS_EXPOSURE.name())),
                        Float.parseFloat(properties.getProperty(PostProcessProperties.POST_PROCESS_EXPOSURE_VALUE.name())),
                        Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS_CONTRAST.name())),
                        Float.parseFloat(properties.getProperty(PostProcessProperties.POST_PROCESS_CONTRAST_VALUE.name())),
                        Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS_BRIGHTNESS.name())),
                        Float.parseFloat(properties.getProperty(PostProcessProperties.POST_PROCESS_BRIGHTNESS_VALUE.name())),
                        Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS_GRAY_SCALE.name())),
                        Boolean.parseBoolean(properties.getProperty(PostProcessProperties.POST_PROCESS_SATURATION.name())),
                        Float.parseFloat(properties.getProperty(PostProcessProperties.POST_PROCESS_SATURATION_VALUE.name())));
            }

            if (Boolean.parseBoolean(properties.getProperty(OverlayProperties.OVERLAY.name())))
            {
                try
                {
                    BufferedImage overlayImage = ImageIO.read(new File(properties.getProperty(OverlayProperties.OVERLAY_IMAGE_PATH.name())));
                    image = ImageUtilities.computeOverlay(
                            image,
                            overlayImage,
                            Integer.parseInt(properties.getProperty(OverlayProperties.OVERLAY_RESIZE.name())),
                            OverlayPosition.valueOf(properties.getProperty(OverlayProperties.OVERLAY_POSITION.name())),
                            Integer.parseInt(properties.getProperty(OverlayProperties.OVERLAY_HORIZONTAL_INSET.name())),
                            Integer.parseInt(properties.getProperty(OverlayProperties.OVERLAY_VERTICAL_INSET.name())),
                            Float.parseFloat(properties.getProperty(OverlayProperties.OVERLAY_ALPHA.name())));
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }

            image = Scalr.resize(image, Scalr.Method.AUTOMATIC, 800);
            imageLabel.setIcon(new ImageIcon(image));
            frame.pack();
            image.flush();
        }
        frame.setVisible(true);
    }
    else
    {
        JOptionPane.showMessageDialog(
                this,
                "Cannot take test shot.  No camera is connected.",
                "Take Test Shot Error",
                JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_takeTestShotButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PhotorobotoMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PhotorobotoMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PhotorobotoMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PhotorobotoMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run()
            {
                new PhotorobotoMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem loadPropertiesMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem savePropertiesMenuItem;
    private javax.swing.JButton startSessionButton;
    private javax.swing.JButton takeTestShotButton;
    // End of variables declaration//GEN-END:variables
}
